{"/home/travis/build/npmtest/node-npmtest-phantomjs-prebuilt/test.js":"/* istanbul instrument in package npmtest_phantomjs_prebuilt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phantomjs-prebuilt/lib.npmtest_phantomjs_prebuilt.js":"/* istanbul instrument in package npmtest_phantomjs_prebuilt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_phantomjs_prebuilt = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_phantomjs_prebuilt = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-phantomjs-prebuilt/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-phantomjs-prebuilt && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_phantomjs_prebuilt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_phantomjs_prebuilt\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_phantomjs_prebuilt.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_phantomjs_prebuilt.rollup.js'] =\n            local.assetsDict['/assets.npmtest_phantomjs_prebuilt.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_phantomjs_prebuilt.__dirname +\n                    '/lib.npmtest_phantomjs_prebuilt.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phantomjs-prebuilt/node_modules/phantomjs-prebuilt/lib/phantomjs.js":"// Copyright 2013 The Obvious Corporation.\n\n/**\n * @fileoverview Helpers made available via require('phantomjs') once package is\n * installed.\n */\n\nvar fs = require('fs')\nvar path = require('path')\nvar spawn = require('child_process').spawn\nvar Promise = require('es6-promise').Promise\n\n\n/**\n * Where the phantom binary can be found.\n * @type {string}\n */\ntry {\n  var location = require('./location')\n  exports.path = path.resolve(__dirname, location.location)\n  exports.platform = location.platform\n  exports.arch = location.arch\n} catch(e) {\n  // Must be running inside install script.\n  exports.path = null\n}\n\n\n/**\n * The version of phantomjs installed by this package.\n * @type {number}\n */\nexports.version = '2.1.1'\n\n\n/**\n * Returns a clean path that helps avoid `which` finding bin files installed\n * by NPM for this repo.\n * @param {string} path\n * @return {string}\n */\nexports.cleanPath = function (path) {\n  return path\n      .replace(/:[^:]*node_modules[^:]*/g, '')\n      .replace(/(^|:)\\.\\/bin(\\:|$)/g, ':')\n      .replace(/^:+/, '')\n      .replace(/:+$/, '')\n}\n\n\n// Make sure the binary is executable.  For some reason doing this inside\n// install does not work correctly, likely due to some NPM step.\nif (exports.path) {\n  try {\n    // avoid touching the binary if it's already got the correct permissions\n    var st = fs.statSync(exports.path)\n    var mode = st.mode | parseInt('0555', 8)\n    if (mode !== st.mode) {\n      fs.chmodSync(exports.path, mode)\n    }\n  } catch (e) {\n    // Just ignore error if we don't have permission.\n    // We did our best. Likely because phantomjs was already installed.\n  }\n}\n\n/**\n * Executes a script or just runs PhantomJS\n */\nexports.exec = function () {\n  var args = Array.prototype.slice.call(arguments)\n  return spawn(exports.path, args)\n}\n\n/**\n * Runs PhantomJS with provided options\n * @example\n * // handy with WebDriver\n * phantomjs.run('--webdriver=4444').then(program => {\n *   // do something\n *   program.kill()\n * })\n * @returns {Promise} the process of PhantomJS\n */\nexports.run = function () {\n  var args = arguments\n  return new Promise(function (resolve, reject) {\n    try {\n      var program = exports.exec.apply(null, args)\n      var isFirst = true\n      var stderr = ''\n      program.stdout.on('data', function () {\n        // This detects PhantomJS instance get ready.\n        if (!isFirst) return\n        isFirst = false\n        resolve(program)\n      })\n      program.stderr.on('data', function (data) {\n        stderr = stderr + data.toString('utf8')\n      })\n      program.on('error', function (err) {\n        if (!isFirst) return\n        isFirst = false\n        reject(err)\n      })\n      program.on('exit', function (code) {\n        if (!isFirst) return\n        isFirst = false\n        if (code == 0) {\n          // PhantomJS doesn't use exit codes correctly :(\n          if (stderr.indexOf('Error:') == 0) {\n            reject(new Error(stderr))\n          } else {\n            resolve(program)\n          }\n        } else {\n          reject(new Error('Exit code: ' + code))\n        }\n      })\n    } catch (err) {\n      reject(err)\n    }\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-phantomjs-prebuilt/node_modules/phantomjs-prebuilt/lib/location.js":"module.exports.location = \"phantom/bin/phantomjs\"\nmodule.exports.platform = \"linux\"\nmodule.exports.arch = \"x64\"\n","/home/travis/build/npmtest/node-npmtest-phantomjs-prebuilt/node_modules/phantomjs-prebuilt/install.js":"// Copyright 2012 The Obvious Corporation.\n\n/*\n * This simply fetches the right version of phantom for the current platform.\n */\n\n'use strict'\n\nvar requestProgress = require('request-progress')\nvar progress = require('progress')\nvar extractZip = require('extract-zip')\nvar cp = require('child_process')\nvar fs = require('fs-extra')\nvar helper = require('./lib/phantomjs')\nvar kew = require('kew')\nvar path = require('path')\nvar request = require('request')\nvar url = require('url')\nvar util = require('./lib/util')\nvar which = require('which')\nvar os = require('os')\n\nvar originalPath = process.env.PATH\n\nvar checkPhantomjsVersion = util.checkPhantomjsVersion\nvar getTargetPlatform = util.getTargetPlatform\nvar getTargetArch = util.getTargetArch\nvar getDownloadSpec = util.getDownloadSpec\nvar findValidPhantomJsBinary = util.findValidPhantomJsBinary\nvar verifyChecksum = util.verifyChecksum\nvar writeLocationFile = util.writeLocationFile\n\n// If the process exits without going through exit(), then we did not complete.\nvar validExit = false\n\nprocess.on('exit', function () {\n  if (!validExit) {\n    console.log('Install exited unexpectedly')\n    exit(1)\n  }\n})\n\n// NPM adds bin directories to the path, which will cause `which` to find the\n// bin for this package not the actual phantomjs bin.  Also help out people who\n// put ./bin on their path\nprocess.env.PATH = helper.cleanPath(originalPath)\n\nvar libPath = path.join(__dirname, 'lib')\nvar pkgPath = path.join(libPath, 'phantom')\nvar phantomPath = null\n\n// If the user manually installed PhantomJS, we want\n// to use the existing version.\n//\n// Do not re-use a manually-installed PhantomJS with\n// a different version.\n//\n// Do not re-use an npm-installed PhantomJS, because\n// that can lead to weird circular dependencies between\n// local versions and global versions.\n// https://github.com/Obvious/phantomjs/issues/85\n// https://github.com/Medium/phantomjs/pull/184\nkew.resolve(true)\n  .then(tryPhantomjsInLib)\n  .then(tryPhantomjsOnPath)\n  .then(downloadPhantomjs)\n  .then(extractDownload)\n  .then(function (extractedPath) {\n    return copyIntoPlace(extractedPath, pkgPath)\n  })\n  .then(function () {\n    var location = getTargetPlatform() === 'win32' ?\n        path.join(pkgPath, 'bin', 'phantomjs.exe') :\n        path.join(pkgPath, 'bin' ,'phantomjs')\n\n    try {\n      // Ensure executable is executable by all users\n      fs.chmodSync(location, '755')\n    } catch (err) {\n      if (err.code == 'ENOENT') {\n        console.error('chmod failed: phantomjs was not successfully copied to', location)\n        exit(1)\n      }\n      throw err\n    }\n\n    var relativeLocation = path.relative(libPath, location)\n    writeLocationFile(relativeLocation)\n\n    console.log('Done. Phantomjs binary available at', location)\n    exit(0)\n  })\n  .fail(function (err) {\n    console.error('Phantom installation failed', err, err.stack)\n    exit(1)\n  })\n\nfunction exit(code) {\n  validExit = true\n  process.env.PATH = originalPath\n  process.exit(code || 0)\n}\n\n\nfunction findSuitableTempDirectory() {\n  var now = Date.now()\n  var candidateTmpDirs = [\n    process.env.npm_config_tmp,\n    os.tmpdir(),\n    path.join(process.cwd(), 'tmp')\n  ]\n\n  for (var i = 0; i < candidateTmpDirs.length; i++) {\n    var candidatePath = candidateTmpDirs[i]\n    if (!candidatePath) continue\n\n    try {\n      candidatePath = path.join(path.resolve(candidatePath), 'phantomjs')\n      fs.mkdirsSync(candidatePath, '0777')\n      // Make double sure we have 0777 permissions; some operating systems\n      // default umask does not allow write by default.\n      fs.chmodSync(candidatePath, '0777')\n      var testFile = path.join(candidatePath, now + '.tmp')\n      fs.writeFileSync(testFile, 'test')\n      fs.unlinkSync(testFile)\n      return candidatePath\n    } catch (e) {\n      console.log(candidatePath, 'is not writable:', e.message)\n    }\n  }\n\n  console.error('Can not find a writable tmp directory, please report issue ' +\n      'on https://github.com/Medium/phantomjs/issues with as much ' +\n      'information as possible.')\n  exit(1)\n}\n\n\nfunction getRequestOptions() {\n  var strictSSL = !!process.env.npm_config_strict_ssl\n  if (process.version == 'v0.10.34') {\n    console.log('Node v0.10.34 detected, turning off strict ssl due to https://github.com/joyent/node/issues/8894')\n    strictSSL = false\n  }\n\n  var options = {\n    uri: getDownloadUrl(),\n    encoding: null, // Get response as a buffer\n    followRedirect: true, // The default download path redirects to a CDN URL.\n    headers: {},\n    strictSSL: strictSSL\n  }\n\n  var proxyUrl = process.env.npm_config_https_proxy ||\n      process.env.npm_config_http_proxy ||\n      process.env.npm_config_proxy\n  if (proxyUrl) {\n\n    // Print using proxy\n    var proxy = url.parse(proxyUrl)\n    if (proxy.auth) {\n      // Mask password\n      proxy.auth = proxy.auth.replace(/:.*$/, ':******')\n    }\n    console.log('Using proxy ' + url.format(proxy))\n\n    // Enable proxy\n    options.proxy = proxyUrl\n  }\n\n  // Use the user-agent string from the npm config\n  options.headers['User-Agent'] = process.env.npm_config_user_agent\n\n  // Use certificate authority settings from npm\n  var ca = process.env.npm_config_ca\n  if (!ca && process.env.npm_config_cafile) {\n    try {\n      ca = fs.readFileSync(process.env.npm_config_cafile, {encoding: 'utf8'})\n        .split(/\\n(?=-----BEGIN CERTIFICATE-----)/g)\n\n      // Comments at the beginning of the file result in the first\n      // item not containing a certificate - in this case the\n      // download will fail\n      if (ca.length > 0 && !/-----BEGIN CERTIFICATE-----/.test(ca[0])) {\n        ca.shift()\n      }\n\n    } catch (e) {\n      console.error('Could not read cafile', process.env.npm_config_cafile, e)\n    }\n  }\n\n  if (ca) {\n    console.log('Using npmconf ca')\n    options.agentOptions = {\n      ca: ca\n    }\n    options.ca = ca\n  }\n\n  return options\n}\n\nfunction handleRequestError(error) {\n  if (error && error.stack && error.stack.indexOf('SELF_SIGNED_CERT_IN_CHAIN') != -1) {\n      console.error('Error making request, SELF_SIGNED_CERT_IN_CHAIN. ' +\n          'Please read https://github.com/Medium/phantomjs#i-am-behind-a-corporate-proxy-that-uses-self-signed-ssl-certificates-to-intercept-encrypted-traffic')\n      exit(1)\n  } else if (error) {\n    console.error('Error making request.\\n' + error.stack + '\\n\\n' +\n        'Please report this full log at https://github.com/Medium/phantomjs')\n    exit(1)\n  } else {\n    console.error('Something unexpected happened, please report this full ' +\n        'log at https://github.com/Medium/phantomjs')\n    exit(1)\n  }\n}\n\nfunction requestBinary(requestOptions, filePath) {\n  var deferred = kew.defer()\n\n  var writePath = filePath + '-download-' + Date.now()\n\n  console.log('Receiving...')\n  var bar = null\n  requestProgress(request(requestOptions, function (error, response, body) {\n    console.log('')\n    if (!error && response.statusCode === 200) {\n      fs.writeFileSync(writePath, body)\n      console.log('Received ' + Math.floor(body.length / 1024) + 'K total.')\n      fs.renameSync(writePath, filePath)\n      deferred.resolve(filePath)\n\n    } else if (response) {\n      console.error('Error requesting archive.\\n' +\n          'Status: ' + response.statusCode + '\\n' +\n          'Request options: ' + JSON.stringify(requestOptions, null, 2) + '\\n' +\n          'Response headers: ' + JSON.stringify(response.headers, null, 2) + '\\n' +\n          'Make sure your network and proxy settings are correct.\\n\\n' +\n          'If you continue to have issues, please report this full log at ' +\n          'https://github.com/Medium/phantomjs')\n      exit(1)\n    } else {\n      handleRequestError(error)\n    }\n  })).on('progress', function (state) {\n    try {\n      if (!bar) {\n        bar = new progress('  [:bar] :percent', {total: state.size.total, width: 40})\n      }\n      bar.curr = state.size.transferred\n      bar.tick()\n    } catch (e) {\n      // It doesn't really matter if the progress bar doesn't update.\n    }\n  })\n  .on('error', handleRequestError)\n\n  return deferred.promise\n}\n\n\nfunction extractDownload(filePath) {\n  var deferred = kew.defer()\n  // extract to a unique directory in case multiple processes are\n  // installing and extracting at once\n  var extractedPath = filePath + '-extract-' + Date.now()\n  var options = {cwd: extractedPath}\n\n  fs.mkdirsSync(extractedPath, '0777')\n  // Make double sure we have 0777 permissions; some operating systems\n  // default umask does not allow write by default.\n  fs.chmodSync(extractedPath, '0777')\n\n  if (filePath.substr(-4) === '.zip') {\n    console.log('Extracting zip contents')\n    extractZip(path.resolve(filePath), {dir: extractedPath}, function(err) {\n      if (err) {\n        console.error('Error extracting zip')\n        deferred.reject(err)\n      } else {\n        deferred.resolve(extractedPath)\n      }\n    })\n\n  } else {\n    console.log('Extracting tar contents (via spawned process)')\n    cp.execFile('tar', ['jxf', path.resolve(filePath)], options, function (err) {\n      if (err) {\n        console.error('Error extracting archive')\n        deferred.reject(err)\n      } else {\n        deferred.resolve(extractedPath)\n      }\n    })\n  }\n  return deferred.promise\n}\n\n\nfunction copyIntoPlace(extractedPath, targetPath) {\n  console.log('Removing', targetPath)\n  return kew.nfcall(fs.remove, targetPath).then(function () {\n    // Look for the extracted directory, so we can rename it.\n    var files = fs.readdirSync(extractedPath)\n    for (var i = 0; i < files.length; i++) {\n      var file = path.join(extractedPath, files[i])\n      if (fs.statSync(file).isDirectory() && file.indexOf(helper.version) != -1) {\n        console.log('Copying extracted folder', file, '->', targetPath)\n        return kew.nfcall(fs.move, file, targetPath)\n      }\n    }\n\n    console.log('Could not find extracted file', files)\n    throw new Error('Could not find extracted file')\n  })\n}\n\n/**\n * Check to see if the binary in lib is OK to use. If successful, exit the process.\n */\nfunction tryPhantomjsInLib() {\n  return kew.fcall(function () {\n    return findValidPhantomJsBinary(path.resolve(__dirname, './lib/location.js'))\n  }).then(function (binaryLocation) {\n    if (binaryLocation) {\n      console.log('PhantomJS is previously installed at', binaryLocation)\n      exit(0)\n    }\n  }).fail(function () {\n    // silently swallow any errors\n  })\n}\n\n/**\n * Check to see if the binary on PATH is OK to use. If successful, exit the process.\n */\nfunction tryPhantomjsOnPath() {\n  if (getTargetPlatform() != process.platform || getTargetArch() != process.arch) {\n    console.log('Building for target platform ' + getTargetPlatform() + '/' + getTargetArch() +\n                '. Skipping PATH search')\n    return kew.resolve(false)\n  }\n\n  return kew.nfcall(which, 'phantomjs')\n  .then(function (result) {\n    phantomPath = result\n    console.log('Considering PhantomJS found at', phantomPath)\n\n    // Horrible hack to avoid problems during global install. We check to see if\n    // the file `which` found is our own bin script.\n    if (phantomPath.indexOf(path.join('npm', 'phantomjs')) !== -1) {\n      console.log('Looks like an `npm install -g` on windows; skipping installed version.')\n      return\n    }\n\n    var contents = fs.readFileSync(phantomPath, 'utf8')\n    if (/NPM_INSTALL_MARKER/.test(contents)) {\n      console.log('Looks like an `npm install -g`')\n\n      var phantomLibPath = path.resolve(fs.realpathSync(phantomPath), '../../lib/location')\n      return findValidPhantomJsBinary(phantomLibPath)\n      .then(function (binaryLocation) {\n        if (binaryLocation) {\n          writeLocationFile(binaryLocation)\n          console.log('PhantomJS linked at', phantomLibPath)\n          exit(0)\n        }\n        console.log('Could not link global install, skipping...')\n      })\n    } else {\n      return checkPhantomjsVersion(phantomPath).then(function (matches) {\n        if (matches) {\n          writeLocationFile(phantomPath)\n          console.log('PhantomJS is already installed on PATH at', phantomPath)\n          exit(0)\n        }\n      })\n    }\n  }, function () {\n    console.log('PhantomJS not found on PATH')\n  })\n  .fail(function (err) {\n    console.error('Error checking path, continuing', err)\n    return false\n  })\n}\n\n/**\n * @return {?string} Get the download URL for phantomjs.\n *     May return null if no download url exists.\n */\nfunction getDownloadUrl() {\n  var spec = getDownloadSpec()\n  return spec && spec.url\n}\n\n/**\n * Download phantomjs, reusing the existing copy on disk if available.\n * Exits immediately if there is no binary to download.\n * @return {Promise.<string>} The path to the downloaded file.\n */\nfunction downloadPhantomjs() {\n  var downloadSpec = getDownloadSpec()\n  if (!downloadSpec) {\n    console.error(\n        'Unexpected platform or architecture: ' + getTargetPlatform() + '/' + getTargetArch() + '\\n' +\n        'It seems there is no binary available for your platform/architecture\\n' +\n        'Try to install PhantomJS globally')\n    exit(1)\n  }\n\n  var downloadUrl = downloadSpec.url\n  var downloadedFile\n\n  return kew.fcall(function () {\n    // Can't use a global version so start a download.\n    var tmpPath = findSuitableTempDirectory()\n    var fileName = downloadUrl.split('/').pop()\n    downloadedFile = path.join(tmpPath, fileName)\n\n    if (fs.existsSync(downloadedFile)) {\n      console.log('Download already available at', downloadedFile)\n      return verifyChecksum(downloadedFile, downloadSpec.checksum)\n    }\n    return false\n  }).then(function (verified) {\n    if (verified) {\n      return downloadedFile\n    }\n\n    // Start the install.\n    console.log('Downloading', downloadUrl)\n    console.log('Saving to', downloadedFile)\n    return requestBinary(getRequestOptions(), downloadedFile)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-phantomjs-prebuilt/node_modules/phantomjs-prebuilt/lib/util.js":"/**\n * @fileoverview Package-private helpers for the installer.\n */\n\n'use strict'\n\nvar cp = require('child_process')\nvar fs = require('fs-extra')\nvar hasha = require('hasha')\nvar helper = require('./phantomjs')\nvar kew = require('kew')\nvar path = require('path')\n\nvar DEFAULT_CDN = 'https://github.com/Medium/phantomjs/releases/download/v2.1.1'\nvar libPath = __dirname\n\n/**\n * Given a lib/location file of a PhantomJS previously installed with NPM,\n * is there a valid PhantomJS binary at this lib/location.\n * @return {Promise<string>} resolved location of phantomjs binary on success\n */\nfunction findValidPhantomJsBinary(libPath) {\n  return kew.fcall(function () {\n    var libModule = require(libPath)\n    if (libModule.location &&\n        getTargetPlatform() == libModule.platform &&\n        getTargetArch() == libModule.arch) {\n      var resolvedLocation = path.resolve(path.dirname(libPath), libModule.location)\n      if (fs.statSync(resolvedLocation)) {\n        return checkPhantomjsVersion(resolvedLocation).then(function (matches) {\n          if (matches) {\n            return kew.resolve(resolvedLocation)\n          }\n        })\n      }\n    }\n    return false\n  }).fail(function () {\n    return false\n  })\n}\n\n/**\n * Check to make sure a given binary is the right version.\n * @return {kew.Promise.<boolean>}\n */\nfunction checkPhantomjsVersion(phantomPath) {\n  console.log('Found PhantomJS at', phantomPath, '...verifying')\n  return kew.nfcall(cp.execFile, phantomPath, ['--version']).then(function (stdout) {\n    var version = stdout.trim()\n    if (helper.version == version) {\n      return true\n    } else {\n      console.log('PhantomJS detected, but wrong version', stdout.trim(), '@', phantomPath + '.')\n      return false\n    }\n  }).fail(function (err) {\n    console.error('Error verifying phantomjs, continuing', err)\n    return false\n  })\n}\n\n/**\n * Writes the location file with location and platform/arch metadata about the\n * binary.\n */\nfunction writeLocationFile(location) {\n  console.log('Writing location.js file')\n  if (getTargetPlatform() === 'win32') {\n    location = location.replace(/\\\\/g, '\\\\\\\\')\n  }\n\n  var platform = getTargetPlatform()\n  var arch = getTargetArch()\n\n  var contents = 'module.exports.location = \"' + location + '\"\\n'\n\n  if (/^[a-zA-Z0-9]*$/.test(platform) && /^[a-zA-Z0-9]*$/.test(arch)) {\n    contents +=\n        'module.exports.platform = \"' + getTargetPlatform() + '\"\\n' +\n        'module.exports.arch = \"' + getTargetArch() + '\"\\n'\n  }\n\n  fs.writeFileSync(path.join(libPath, 'location.js'), contents)\n}\n\n/**\n * @return {?{url: string, checksum: string}} Get the download URL and expected\n *     SHA-256 checksum for phantomjs.  May return null if no download url exists.\n */\nfunction getDownloadSpec() {\n  var cdnUrl = process.env.npm_config_phantomjs_cdnurl ||\n      process.env.PHANTOMJS_CDNURL ||\n      DEFAULT_CDN\n  var downloadUrl = cdnUrl + '/phantomjs-' + helper.version + '-'\n  var checksum = ''\n\n  var platform = getTargetPlatform()\n  var arch = getTargetArch()\n  if (platform === 'linux' && arch === 'x64') {\n    downloadUrl += 'linux-x86_64.tar.bz2'\n    checksum = '86dd9a4bf4aee45f1a84c9f61cf1947c1d6dce9b9e8d2a907105da7852460d2f'\n  } else if (platform === 'linux' && arch == 'ia32') {\n    downloadUrl += 'linux-i686.tar.bz2'\n    checksum = '80e03cfeb22cc4dfe4e73b68ab81c9fdd7c78968cfd5358e6af33960464f15e3'\n  } else if (platform === 'darwin') {\n    downloadUrl += 'macosx.zip'\n    checksum = '538cf488219ab27e309eafc629e2bcee9976990fe90b1ec334f541779150f8c1'\n  } else if (platform === 'win32') {\n    downloadUrl += 'windows.zip'\n    checksum = 'd9fb05623d6b26d3654d008eab3adafd1f6350433dfd16138c46161f42c7dcc8'\n  } else {\n    return null\n  }\n  return {url: downloadUrl, checksum: checksum}\n}\n\n/**\n * Check to make sure that the file matches the checksum.\n * @param {string} fileName\n * @param {string} checksum\n * @return {Promise.<boolean>}\n */\nfunction verifyChecksum(fileName, checksum) {\n  return kew.resolve(hasha.fromFile(fileName, {algorithm: 'sha256'})).then(function (hash) {\n    var result = checksum == hash\n    if (result) {\n      console.log('Verified checksum of previously downloaded file')\n    } else {\n      console.log('Checksum did not match')\n    }\n    return result\n  }).fail(function (err) {\n    console.error('Failed to verify checksum: ', err)\n    return false\n  })\n}\n\n/**\n * @return {string}\n */\nfunction getTargetPlatform() {\n  return process.env.PHANTOMJS_PLATFORM || process.platform\n}\n\n/**\n * @return {string}\n */\nfunction getTargetArch() {\n  return process.env.PHANTOMJS_ARCH || process.arch\n}\n\nmodule.exports = {\n  checkPhantomjsVersion: checkPhantomjsVersion,\n  getDownloadSpec: getDownloadSpec,\n  getTargetPlatform: getTargetPlatform,\n  getTargetArch: getTargetArch,\n  findValidPhantomJsBinary: findValidPhantomJsBinary,\n  verifyChecksum: verifyChecksum,\n  writeLocationFile: writeLocationFile\n}\n"}